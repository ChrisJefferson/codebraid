---
title: "Codebraid with Python"
---


## Inline code


### Run

Inline code with `.cb.run` gives raw stdout.

`print(1 + 2)`{.python .cb.run example=true}


### Expression and inline notebook

Inline code with `.cb.expr` and `.cb.nb` (`nb` is short for `notebook`)
evaluate an expression and then insert the raw output into the document, where
it is interpreted as Markdown.

`"...".join(["*emphasis*", "**strong**", "~~strikeout~~"])`{.python .cb.expr example=true}

`"$2^8 = {}$".format(2**8)`{.python .cb.nb example=true}


### Stderr

In the event of an error, inline code automatically shows stderr by default.
This code is executed in its own session, `inline_error`, so that it does
not impact other examples.

`1 + "a"`{.python .cb.run session=inline_error example=true}


### Source errors

A message is also displayed for errors in the Markdown source.  This usually
includes the name of the document source and the approximate line number.

`print(1 + 2)`{.pythn .cb.run session=inline_source_error example=true}



## Block code


### Run

Code blocks with `.cb.run` give raw stdout.  There is continuity between code
blocks so long as they are in the same session; variables persist.

```{.python .cb.run session=hello example=true}
x = 'Hello from *Python!*'
```

```{.python .cb.run session=hello example=true}
print(x)
```


### Notebook

Code blocks with `.cb.nb` show the code and also the verbatim stdout.

```{.python .cb.nb session=random example=true}
import random
random.seed(2)
rnums = [random.randrange(100) for n in range(10)]
print("Random numbers: {}".format(rnums))
print("Sorted numbers: {}".format(sorted(rnums)))
print("Range: {}".format([min(rnums), max(rnums)]))
```

While there is not yet support for automatically including plots, including
them manually is straightforward.

Note that this example uses the `show` keyword argument for the code block
so that the output is interpreted as raw Markdown rather than displayed
verbatim (the default for `.cb.nb`).

```{.python .cb.nb session=plot show=code+stdout:raw+stderr example=true}
import numpy as np
import matplotlib.pyplot as plt
x = np.linspace(0, 6, 600)
plt.figure(figsize=(4,2.5))
plt.grid(linestyle='dashed')
plt.plot(x, np.sin(x))
plt.xlabel('$x$')
plt.ylabel('$y=\\sin(x)$')
plt.savefig('plot.png', transparent=True, bbox_inches='tight')
markdown = '''
![The function $y=\\sin(x)$](plot.png){width=100% max-width=400px}
'''
print(markdown)
```


### Stderr

Code blocks show stderr automatically by default.

```{.python .cb.nb .line_numbers session=block_error example=true}
var = 123
print(var, flush=True)
var += "a"
```


### Source errors

A message is also displayed for errors in the Markdown source.  This usually
includes the name of the document source and the approximate line number.

```{.python .cb.ruuun session=block_source_error example=true}
print(1 + 2)
```



## Other options

By default, stdout and stderr are only shown if they are non-empty.  In some
situations, it may be useful to represent empty output visually as
confirmation that there indeed was none.

```{.python .cb.run show=code+stdout+stderr:verbatim_or_empty example=true}
x = 1 + 2
```

It is also possible to selectively hide output from a code chunk.

```{.python .cb.nb hide=stdout example=true}
print(x)
```

`hide` takes any combination of `code`, `stderr`, and `stdout`, or simply
`all`.
